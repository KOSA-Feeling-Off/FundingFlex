<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.fundingflex.mybatis.mapper.funding.FundingsMapper">

	<!-- 펀딩 resultmap -->
	<resultMap id="FundingsResultMap"
		type="com.fundingflex.funding.domain.dto.FundingsDTO">
		<id column="fundings_id" property="fundingsId" />
		<result column="title" property="title" />
		<result column="content" property="content" />
		<result column="status_flag" property="statusFlag" />
		<result column="like_count" property="likeCount" />
		<result column="goal_amount" property="goalAmount" />
		<result column="category_id" property="categoryId" />
		<collection property="imageUrls" ofType="string">
			<result column="image_url" />
		</collection>
	</resultMap>


	<!-- 펀딩 정보 저장 후 id 반환 -->
	<insert id="insertFundings" parameterType="com.fundingflex.funding.domain.entity.Fundings">
		INSERT
		  INTO
	  FUNDINGS ( category_id
			   , user_id
			   , category_name
			   , title
			   , content
			   , status_flag
			   , goal_amount
			   , created_at
			   , created_by
			   , is_deleted
			   )
		VALUES ( #{categoryId}
			   , #{userId}
			   , #{categoryName}
			   , #{title}
			   , #{content}
			   , #{statusFlag, typeHandler=com.fundingflex.common.util.EnumTypeHandler, jdbcType=NUMERIC}
			   , #{goalAmount}
			   , CURRENT_TIMESTAMP
			   , #{createdBy}
		 	   , #{isDeleted, typeHandler=com.fundingflex.common.util.EnumTypeHandler, jdbcType=VARCHAR}
		       )

		<!-- 방금 삽입된 row의 ID 가져오기 -->
		<selectKey keyProperty="fundingsId" resultType="long" order="AFTER">
			SELECT fundings_id
			  FROM ( SELECT fundings_id
			           FROM FUNDINGS
			          WHERE category_id 	= #{categoryId}
			            AND user_id 		= #{userId}
			            AND title 		= #{title}
			       ORDER BY created_at DESC
			       )
			 WHERE ROWNUM = 1
		</selectKey>

	</insert>


	<!-- 펀딩 체크 -->
	<select id="existsById" resultType="int">
		SELECT CASE WHEN EXISTS
		(SELECT 1
		FROM fundings
		WHERE fundings_id = #{fundingsId})
		THEN 1
		ELSE 0
		END
		FROM dual
	</select>

	<!--펀딩 수정 폼 조회 -->
	<select id="selectFundingsForm"
		resultType="com.fundingflex.funding.domain.form.FundingsForm">
		SELECT category_id
		, fundings_id fundingsId
		, title title
		,
		content content
		, goal_amount goalAmount
		FROM fundings
		WHERE fundings_id
		= #{fundingsId}
	</select>


	<!-- 펀딩 정보 상세 조회 -->
	<select id="selectFundingInfo" resultType="com.fundingflex.funding.domain.dto.FundingsInfoDTO">
		SELECT c.category_id
			 , c.category_name
			 , f.fundings_id
			 , f.title
			 , f.content
			 , f.goal_amount
			 , f.status_flag
			 , NVL(fc.collected_amount, 0)
			 , NVL(fc.percent,0)
		  FROM fundings 			f
	INNER JOIN categories 			c
			ON f.category_id 		= c.category_id
	 LEFT JOIN funding_conditions 	fc
			ON f.fundings_id 		= fc.fundings_id
		 WHERE f.fundings_id 		= #{fundingsId}
		   AND f.category_id 		= #{categoryId}
		    
	</select>


	<!-- 펀딩 수정 -->
	<update id="updateFunding">
		UPDATE fundings
		SET title = #{fundingsForm.title}
		  , content = #{fundingsForm.content}
		  , goal_amount = #{fundingsForm.goalAmount}
		  , updated_at = CURRENT_TIMESTAMP
		  , updated_by = '이너프'
		WHERE category_id = #{categoryId}
		AND fundings_id = #{fundingId}
	</update>

	<!-- 펀딩 참여시 펀딩 100% 업데이트 -->
	<update id="updateFundinsStatusFlag">
		UPDATE fundings
		   SET status_flag = #{fundings.statusFlag, typeHandler=com.fundingflex.common.util.EnumTypeHandler, jdbcType=NUMERIC}
			   , updated_at = CURRENT_TIMESTAMP
			   , updated_by = #{nickName}
		 WHERE category_id = #{fundings.categoryId}
			 AND fundings_id = #{fundings.fundingsId}
	</update>




	<!-- 펀딩 리스트 조회 -->
	<select id="getAllFundings" resultMap="FundingsResultMap">
		SELECT f.fundings_id, f.title, f.content, f.status_flag, f.like_count,
		f.goal_amount, f.category_id,
		i.img_id, i.fundings_id AS
		image_fundings_id, i.image_url, i.seq, i.is_deleted,
		CASE
            WHEN EXISTS (
                SELECT 1
                FROM likes
                WHERE fundings_id = f.fundings_id AND user_id = #{userId}
            ) THEN 'Y'
            ELSE 'N'
        END AS exists_flag
		FROM fundings f
		LEFT JOIN images i ON f.fundings_id = i.fundings_id AND i.is_deleted =
		'N'
		ORDER BY
		<choose>
			<when test="sortBy == 'likes'">f.like_count DESC</when>
			<when test="sortBy == 'inProgress'">f.status_flag DESC</when>
			<otherwise>f.created_at DESC</otherwise>
		</choose>
	</select>


	<!-- 펀딩 이미지 조회 -->
	<select id="findImagesByFundingsIdOrderBySeqAsc" parameterType="long" resultType="com.fundingflex.funding.domain.entity.Images">
		SELECT * FROM images WHERE fundings_id = #{fundingsId} ORDER BY seq ASC
	</select>




	<!-- 펀딩 정보 조회 by ID -->
	<select id="findById" parameterType="long" resultType="com.fundingflex.funding.domain.entity.Fundings">
		SELECT * FROM fundings WHERE fundings_id = #{fundingsId}
	</select>


	<!-- 펀딩 자금조달 insert -->
	<insert id="insertFundingConditions">
		INSERT
		  INTO funding_conditions ( fundings_id, goal_amount)
		VALUES (#{fundingsId}, #{goalAmount})
	</insert>

	<!-- 펀딩 자금조달 조회 (fundingsId 기준) -->
	<select id="findFundingConditionsByFundingsId" parameterType="long" resultType="com.fundingflex.funding.domain.entity.FundingConditions">
		SELECT * FROM funding_conditions WHERE fundings_id = #{fundingsId}
	</select>

	<!-- 펀딩 참여 조회 -->
	<select id="findFundingJoinsByFundingsId" parameterType="long"
		resultType="com.fundingflex.funding.domain.entity.FundingJoin">
		SELECT * FROM funding_joins WHERE fundings_id = #{fundingsId}
	</select>

	<!-- 펀딩 자금조달 업데이트 -->
	<update id="updateFundingConditions">
		UPDATE funding_conditions
		   SET collected_amount = #{collectedAmount}
		     , percent = #{percent}
		   	 , hundred_percent_flag	= #{hundredPercentFlag}
		 WHERE fundings_id = #{fundingsId}
	</update>


	<!-- 펀딩 자금조달 목표금액 업데이트 -->
	<update id="updateFundingConditionsAmount">
		UPDATE funding_conditions
			 SET goal_amount		= #{goalAmount}
		 WHERE fundings_id		= #{fundingsId}
	</update>


	<!-- 펀딩 참여 삽입 -->
	<insert id="insertFundingJoin" parameterType="com.fundingflex.funding.domain.entity.FundingJoin">
		INSERT
		  INTO funding_joins
				 ( fundings_id
				 , user_id
				 , funding_amount
				 , name_undisclosed
				 , amount_undisclosed
				 , created_by
				 )
		VALUES (#{fundingsId}
				  , #{userId}
				  , #{fundingAmount}
				  , #{nameUndisclosed}
				  , #{amountUndisclosed}
			    , #{createdBy}
				  )

		<!-- 방금 삽입된 row의 ID 가져오기 -->
		<selectKey keyProperty="fundingJoinId" resultType="long" order="AFTER">
			SELECT funding_join_id
			  FROM ( SELECT funding_join_id
			           FROM FUNDING_JOINS
			          WHERE fundings_id = #{fundingsId}
			            AND user_id = #{userId}
			            AND is_deleted = 'N'
			       ORDER BY created_at DESC
			       )
			 WHERE ROWNUM = 1
		</selectKey>
	</insert>

	<!-- 펀딩 참여 업데이트 -->
	<update id="updateFundingJoin">
		UPDATE funding_joins
		   SET funding_amount = #{fundingAmount}
		     , name_undisclosed = #{nameUndisclosed}
		     , amount_undisclosed = #{amountUndisclosed}
		     , updated_at					= CURRENT_TIMESTAMP
		 WHERE funding_join_id = #{fundingJoinId}
	</update>

	<!-- 펀딩 참여 삭제 -->
	<delete id="deleteFundingJoin">
		DELETE FROM funding_joins WHERE funding_join_id = #{fundingJoinId}
	</delete>


	<!-- 좋아요 수 증가
    <update id="incrementLikeCount">
        UPDATE fundings SET like_count = like_count + 1 WHERE fundings_id = #{fundingsId}
    </update>
	-->

    <!-- 좋아요 수 감소
    <update id="decrementLikeCount">
        UPDATE fundings SET like_count = like_count - 1 WHERE fundings_id = #{fundingsId}
    </update>
	-->


	<!-- 좋아요 수 업데이트
	<update id="updateLikeCount">
		UPDATE fundings SET like_count = #{likeCount} WHERE fundings_id = #{fundingsId}
	</update>
	-->

	<!-- 좋아요 존재 여부 확인 -->
	<select id="existsLike" resultType="int">
		SELECT COUNT(1)
		FROM likes
		WHERE fundings_id = #{fundingsId} AND user_id = #{userId}
	</select>

	<!-- 좋아요 추가 -->
	<insert id="insertLike">
		INSERT INTO likes (fundings_id, user_id, created_by)
		VALUES (#{fundingsId}, #{userId}, 'currentUser') <!-- 'currentUser' 부분은 실제 사용자로 변경 필요 -->
	</insert>

	<!-- 좋아요 삭제 -->
	<delete id="deleteLike">
		DELETE FROM likes
		WHERE fundings_id = #{fundingsId} AND user_id = #{userId}
	</delete>

	<!-- 좋아요 수 증가 -->
	<update id="incrementLikeCount">
		UPDATE fundings SET like_count = like_count + 1 WHERE fundings_id =
		#{fundingsId}
	</update>

	<!-- 좋아요 수 감소 -->
	<update id="decrementLikeCount">
		UPDATE fundings SET like_count = like_count - 1 WHERE fundings_id =
		#{fundingsId}
	</update>

	<!-- 카테고리별 펀딩 리스트 조회 -->
	<select id="getFundingsByCategory" resultMap="FundingsResultMap">
		SELECT f.fundings_id, f.title, f.content, f.status_flag, f.like_count,
		f.goal_amount, f.category_id,
		i.img_id, i.fundings_id AS image_fundings_id, i.image_url, i.seq, i.is_deleted
		FROM fundings f
		LEFT JOIN images i ON f.fundings_id = i.fundings_id AND i.is_deleted = 'N'
		WHERE f.category_id = #{categoryId} AND f.is_deleted = 'N'
		ORDER BY
		<choose>
			<when test="sortBy == 'likes'">f.like_count DESC</when>
			<when test="sortBy == 'inProgress'">f.status_flag DESC</when>
			<otherwise>f.created_at DESC</otherwise>
		</choose>
	</select>


	<!-- 진행 중인 펀딩 목록 조회
	<select id="getInProgressFundings" resultMap="FundingsResultMap">
		SELECT f.fundings_id, f.title, f.content, f.status_flag, f.like_count,
		f.goal_amount, f.category_id,
		i.img_id, i.fundings_id AS
		image_fundings_id, i.image_url, i.seq, i.is_deleted
		FROM fundings f
		LEFT JOIN images i ON f.fundings_id = i.fundings_id AND i.is_deleted =
		'N'
		WHERE f.category_id = #{categoryId}
		ORDER BY
		<choose>
			<when test="sortBy == 'likes'">f.like_count DESC</when>
			<when test="sortBy == 'inProgress'">f.status_flag DESC</when>
			<otherwise>f.created_at DESC</otherwise>
		</choose>
	</select>
	-->

	<!-- 임시 진행중인 펀딩 조회 -->
	<select id="getInProgressFundings" resultMap="FundingsResultMap">
    SELECT f.fundings_id, f.title, f.content, f.status_flag, f.like_count,
    f.goal_amount, f.category_id,
    i.img_id, i.fundings_id AS image_fundings_id, i.image_url, i.seq, i.is_deleted,
    CASE
        WHEN EXISTS (
            SELECT 1
            FROM likes
            WHERE fundings_id = f.fundings_id AND user_id = #{userId}
        ) THEN 'Y'
        ELSE 'N'
    END AS exists_flag
    FROM fundings f
    LEFT JOIN images i ON f.fundings_id = i.fundings_id AND i.is_deleted = 'N'
    WHERE f.is_deleted = 'N' AND f.status_flag = 1
    ORDER BY
    <choose>
        <when test="sortBy == 'likes'">f.like_count DESC</when>
        <when test="sortBy == 'inProgress'">f.status_flag DESC</when>
        <otherwise>f.created_at DESC</otherwise>
    </choose>
</select>


	<!-- 진행 중인 펀딩 목록 조회 (카테고리별) -->
    <select id="getInProgressFundingsByCategory" resultMap="FundingsResultMap">
        SELECT f.fundings_id, f.title, f.content, f.status_flag, f.like_count,
        f.goal_amount, f.category_id,
        i.img_id, i.fundings_id AS image_fundings_id, i.image_url, i.seq, i.is_deleted
        FROM fundings f
        LEFT JOIN images i ON f.fundings_id = i.fundings_id AND i.is_deleted = 'N'
        WHERE f.category_id = #{categoryId} AND f.status_flag = 1 AND f.is_deleted = 'N'
        ORDER BY f.created_at DESC
    </select>



</mapper>